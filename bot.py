import random
import sqlite3
import math
import asyncio
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ü—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞ —Ñ–∞–º—ñ–ª—å—è—Ä–∏ –∑ ID —Ç–∞ –µ–º–æ–¥–∑—ñ
ITEMS = {
    1: {"name": "–ú–µ—á –ë–æ–≥–∞ –í—ñ–π–Ω–∏", "emoji": "‚öîÔ∏è"},
    2: {"name": "–©–∏—Ç –ú–∏—Ä—É", "emoji": "üõ°Ô∏è"},
    3: {"name": "–ú–∞–≥—ñ—á–Ω–∞ –∫–Ω–∏–≥–∞", "emoji": "üìñ"},
    4: {"name": "–ï–ª—ñ–∫—Å–∏—Ä –ø—Ä–∞–≤–¥–∏", "emoji": "üß™"},
    5: {"name": "–ö—ñ–ª—å—Ü–µ ", "emoji": "üíç"},
    6: {"name": "–ê–º—É–ª–µ—Ç", "emoji": "üßø"},
    7: {"name": "–°–∫—Ä–∏–Ω—è –∑–ª–∞", "emoji": "üì¶"},
    8: {"name": "–ö–ª—é—á ", "emoji": "üîë"},
    9: {"name": "–ü–ª–∞—â", "emoji": "üß•"},
    10: {"name": "–ß–æ–±–æ—Ç–∏", "emoji": "ü•æ"},
    11: {"name": "???", "emoji": "",},
    12: {"name": "–ö—Ä–∏—à—Ç–∞–ª–µ–≤–∏–π –∂–µ–∑–ª", "emoji": "ü™Ñ", "raid_only": True},
    13: {"name": "–ì—ñ–ª—å–¥—ñ–π—Å—å–∫–∏–π –ü—Ä–∞–ø–æ—Ä", "emoji": "üè≥Ô∏è", "guild_only": True},
    14: {"name": "–ö–æ—Ä–æ–Ω–∞ –õ—ñ–¥–µ—Ä–∞", "emoji": "üëë", "guild_only": True},
    15: {"name": "–ú–∞–Ω—Ç—ñ—è –°–ª–∞–≤–∏", "emoji": "üßô‚Äç‚ôÇÔ∏è", "guild_only": True},
    16: {"name": "–ë–æ–π–æ–≤–∏–π –¢–æ–ø—ñ—Ä–µ—Ü—å", "emoji": "ü™ì"},
    17: {"name": "–õ—É–∫ –ú–∏—Å–ª–∏–≤—Ü—è", "emoji": "üèπ"},
    18: {"name": "–ú–µ—á –°–∞–º—É—Ä–∞—è", "emoji": "üó°Ô∏è"},
    19: {"name": "–ü–∞–ª–∏—Ü—è –®–∞–º–∞–Ω–∞", "emoji": "ü™É"},
    20: {"name": "–ö–∏–Ω–¥–∂–∞–ª –ê—Å–∞—Å–∏–Ω–∞", "emoji": "üó°Ô∏è"},
    21: {"name": "–°—Ñ–µ—Ä–∞ –í–ª–∞–¥–∏", "emoji": "üîÆ"},
    22: {"name": "–ü–ª–∞—â –ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—ñ", "emoji": "üß•"},
    23: {"name": "–°–∞–Ω–¥–∞–ª—ñ—ó –®–≤–∏–¥–∫–æ—Å—Ç—ñ", "emoji": "üëü"},
    24: {"name": "–ü–µ—Ä—Å—Ç–µ–Ω—å –°–∏–ª–∏", "emoji": "üí™"},
    25: {"name": "–ê–º—É–ª–µ—Ç –ó–¥–æ—Ä–æ–≤'—è", "emoji": "‚ù§Ô∏è"},
    26: {"name": "–ö–Ω–∏–≥–∞ –ó–∞–∫–ª—è—Ç—å", "emoji": "üìö"},
    27: {"name": "–ï–ª—ñ–∫—Å–∏—Ä –ú—É–¥—Ä–æ—Å—Ç—ñ", "emoji": "üß¥"},
    28: {"name": "–©–∏—Ç –í—ñ–¥–≤–∞–≥–∏", "emoji": "üõ°Ô∏è"},
    29: {"name": "–ú–µ—á –°–≤—ñ—Ç–ª–∞", "emoji": "‚öîÔ∏è"},
    30: {"name": "–°—Ñ–µ—Ä–∞ –¢–µ–º—Ä—è–≤–∏", "emoji": "üåë"},

}
FAMILIARS = {
    101: {"name": "–§–µ–Ω—ñ–∫—Å", "emoji": "üî•"},
    102: {"name": "–î—Ä–∞–∫–æ–Ω", "emoji": "üêâ"},
    103: {"name": "–Ñ–¥–∏–Ω–æ—Ä—ñ–≥", "emoji": "ü¶Ñ"},
    104: {"name": "–ì—Ä–∏—Ñ–æ–Ω", "emoji": "ü¶Ö"},
    105: {"name": "–ö—Ä–∞–∫–µ–Ω", "emoji": "üêô"},
    106: {"name": "–í–æ–≤–∫", "emoji": "üê∫"},
    107: {"name": "–ö—ñ—Ç", "emoji": "üê±"},
    108: {"name": "–û—Ä–µ–ª", "emoji": "ü¶Ö"},
    109: {"name": "–°–∞–ª–∞–º–∞–Ω–¥—Ä–∞", "emoji": "ü¶é"},
    110: {"name": "–§–µ—è", "emoji": "üßö"},
    111: {"name": "–§—ñ–Ω—Ä—ñ—Ä", "emoji": "ü¶ä"},
    113: {"name": "–õ–µ–≤", "emoji": "ü¶Å"},
    114: {"name": "–¢–∏–≥—Ä", "emoji": "üêÖ"},
    115: {"name": "–í–µ–¥–º—ñ–¥—å", "emoji": "üêª"},
    116: {"name": "–°–æ–≤–∞", "emoji": "ü¶â"},
    117: {"name": "–ü–∞–Ω—Ç–µ—Ä–∞", "emoji": "üêÜ"},
    118: {"name": "–ó–º—ñ–π", "emoji": "üêç"},
    119: {"name": "–ö—ñ—Ç –ë–∞—é–Ω", "emoji": "üêà"},    
    120: {"name": "–¢—ñ–Ω—å–æ–≤–∏–π –¥—É—Ö", "emoji": "üëª", "raid_only": True},
    121: {"name": "–ó–æ—Ä—è–Ω–∏–π –§–µ–Ω—ñ–∫—Å", "emoji": "‚ú®", "event_only": True},
    122: {"name": "–ö–æ—Å–º—ñ—á–Ω–∏–π –î—Ä–∞–∫–æ–Ω", "emoji": "üåå", "event_only": True},
    123: {"name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –Ñ–¥–∏–Ω–æ—Ä—ñ–≥", "emoji": "üåà", "event_only": True},
    124: {"name": "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∏–π –ì—Ä–∏—Ñ–æ–Ω", "emoji": "üåü", "event_only": True},
}

# –ë–æ—Å–∏ –∑ ID
BOSSES = {
    1: {"name": "–¢–µ–º–Ω–∏–π –í–æ–ª–æ–¥–∞—Ä", "emoji": "üòà"},
    2: {"name": "–ö—Ä–∏–∂–∞–Ω–∏–π –¢–∏—Ç–∞–Ω", "emoji": "‚ùÑÔ∏è"},
    3: {"name": "–í–æ–≥–Ω—è–Ω–∏–π –õ–æ—Ä–¥", "emoji": "üî•"},
    9999: {"name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∏–π –¢–∏—Ç–∞–Ω", "emoji": "üëë"}
}

# –†—ñ–¥–∫–æ—Å—Ç—ñ —Ç–∞ —ó—Ö–Ω—ñ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ
RARITIES = {
    "common": {"prob": 0.40, "damage": 5},
    "uncommon": {"prob": 0.25, "damage": 10},
    "rare": {"prob": 0.15, "damage": 30},
    "epic": {"prob": 0.10, "damage": 70},
    "legendary": {"prob": 0.05, "damage": 150},
    "mythic": {"prob": 0.03, "damage": 300},
    "divine": {"prob": 0.015, "damage": 500},
    "unreal": {"prob": 0.005, "damage": 1000}
}

# –¢–∏—Ç—É–ª–∏ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏
TITLES = {
    1: "–ù–æ–≤–∞—á–æ–∫",
    5: "–Ü–Ω—Ç–µ—Ä–Ω",
    15: "–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π",
    40: "–ú–∞–π—Å—Ç–µ—Ä",
    70: "–õ–µ–≥–µ–Ω–¥–∞",
    120: "–ú—ñ—Ñ—ñ—á–Ω–∏–π –≥–µ—Ä–æ–π",
    200: "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∏–π –≥–µ—Ä–æ–π",
    300: "–ù–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π",
    450: "–õ–æ—Ä–¥ –õ–µ–≥–µ–Ω–¥",
    700: "–ï–ø—ñ—á–Ω–∏–π –í–æ–ª–æ–¥–∞—Ä",
    999: "–í–µ—Ä—Ö–æ–≤–Ω–∏–π –ë–æ–≥"
}

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ —Ç–∞ –≤–ª–∞—Å–Ω–∏–∫
TOKEN = os.getenv('TOKEN')
OWNER_ID = 6500735335
ADMINS = [6500735335]
# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–≤–µ–Ω—Ç—É, —Ä–µ–π–¥—É —Ç–∞ –≥—ñ–ª—å–¥—ñ–π—Å—å–∫–∏—Ö –≤—ñ–π–Ω
EVENT = {"active": False, "type": None, "name": None, "end_time": None, "boss_hp": None, "boss_id": None}
GUILD_RAIDS = {}
GUILD_WARS = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def init_db():
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        last_collect TEXT,
                        custom_title TEXT,
                        exp INTEGER DEFAULT 0,
                        bio TEXT
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS collections (
                        user_id INTEGER,
                        item_type TEXT,
                        item_id INTEGER,
                        rarity TEXT,
                        FOREIGN KEY(user_id) REFERENCES users(user_id)
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS familiars_level (
                        user_id INTEGER,
                        item_id INTEGER,
                        exp INTEGER DEFAULT 0,
                        FOREIGN KEY(user_id) REFERENCES users(user_id)
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS guilds (
                        guild_id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT,
                        leader_id INTEGER,
                        co_leader_id INTEGER,
                        last_raid TEXT
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS guild_members (
                        guild_id INTEGER,
                        user_id INTEGER,
                        FOREIGN KEY(guild_id) REFERENCES guilds(guild_id),
                        FOREIGN KEY(user_id) REFERENCES users(user_id)
                    )''')
        c.execute('''CREATE TABLE IF NOT EXISTS guild_wars (
                        guild_id INTEGER,
                        opponent_id INTEGER,
                        damage INTEGER DEFAULT 0,
                        end_time TEXT,
                        boss_id INTEGER,
                        FOREIGN KEY(guild_id) REFERENCES guilds(guild_id)
                    )''')
        conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Ç–∞ —Ç–∏—Ç—É–ª—É
def get_level_and_title(user_id):
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT exp, custom_title FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        exp = result[0] if result else 0
        level = math.floor(math.sqrt(exp))
        custom_title = result[1] if result and result[1] else None
        title = custom_title if custom_title else next((t for threshold, t in sorted(TITLES.items(), reverse=True) if level >= threshold), "–ù–æ–≤–∞—á–æ–∫")
        return level, title

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ —Ñ–∞–º—ñ–ª—å—è—Ä—ñ–≤
def get_familiars_levels(user_id):
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT item_id, exp FROM familiars_level WHERE user_id = ?", (user_id,))
        familiars = c.fetchall()
        return {item_id: min(math.floor(math.sqrt(exp)), 999) for item_id, exp in familiars}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É user_id –∑–∞ –Ω—ñ–∫–Ω–µ–π–º–æ–º –∞–±–æ ID
def resolve_user_id(identifier, context):
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        identifier = identifier.lstrip('@')
        try:
            user_id = int(identifier)
            c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
            result = c.fetchone()
            return result[0] if result else None
        except ValueError:
            c.execute("SELECT user_id FROM users WHERE username = ?", (identifier,))
            result = c.fetchone()
            return result[0] if result else None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username, exp, bio) VALUES (?, ?, ?, ?)", (user_id, username, 0, "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"))
        conn.commit()
    
    keyboard = [
        [InlineKeyboardButton("üì• –ó—ñ–±—Ä–∞—Ç–∏", callback_data="collect")],
        [InlineKeyboardButton("üìã –Ü–Ω–≤–µ–Ω—Ç–∞—Ä", callback_data="inventory")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üîç –£—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏", callback_data="all_items")],
        [InlineKeyboardButton("üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤", callback_data="leaderboard")],
        [InlineKeyboardButton("üè∞ –¢–æ–ø –≥—ñ–ª—å–¥—ñ–π", callback_data="leaderboard_guild")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üåü **–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ö–æ–ª–µ–∫—Ü—ñ–æ–Ω–µ—Ä–∞ –ø—Ä–∏–≥–æ–¥!** üåü\n\n"
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –∑–±–∏—Ä–∞—Ç–∏ —Ä—ñ–¥–∫—ñ—Å–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏, –≤–∏—Ö–æ–≤—É–≤–∞—Ç–∏ —Ñ–∞–º—ñ–ª—å—è—Ä—ñ–≤, –±–∏—Ç–∏—Å—è –∑ –±–æ—Å–∞–º–∏ —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≥—ñ–ª—å–¥—ñ—ó!\n\n"
        "**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
        "üì• `/collect` ‚Äî –ó—ñ–±—Ä–∞—Ç–∏ —Å–∫–∞—Ä–±–∏\n"
        "üìã `/inventory` ‚Äî –¢–≤—ñ–π —ñ–Ω–≤–µ–Ω—Ç–∞—Ä\n"
        "üë§ `/profile` ‚Äî –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
        "üîç `/all_items` ‚Äî –ö–∞—Ç–∞–ª–æ–≥ —É—Å—å–æ–≥–æ\n"
        "üèÜ `/leaderboard` ‚Äî –¢–æ–ø –≥–µ—Ä–æ—ó–≤\n"
        "üè∞ `/leaderboard_guild` ‚Äî –¢–æ–ø –≥—ñ–ª—å–¥—ñ–π\n"
        "‚öîÔ∏è `/attack` ‚Äî –ê—Ç–∞–∫–∞ –Ω–∞ —ñ–≤–µ–Ω—Ç-–±–æ—Å–∞\n"
        "üõ°Ô∏è `/raid_attack <guild_id>` ‚Äî –†–µ–π–¥ —É –≥—ñ–ª—å–¥—ñ—ó\n"
        "üè∞ `/create_guild <–Ω–∞–∑–≤–∞>` ‚Äî –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—ñ–ª—å–¥—ñ—é\n"
        "üö™ `/join_guild <ID>` ‚Äî –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è\n"
        "üìù `/set_bio <—Ç–µ–∫—Å—Ç>` ‚Äî –ó–º—ñ–Ω–∏—Ç–∏ –±—ñ–æ\n"
        "‚öîÔ∏è `/guild_war <guild_id>` ‚Äî –ì—ñ–ª—å–¥—ñ–π—Å—å–∫–∞ –≤—ñ–π–Ω–∞\n"
        "üì¢ `/wow <—Ç–µ–∫—Å—Ç>` ‚Äî –ì–ª–æ–±–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–∞–¥–º—ñ–Ω–∏)\n"
        "üîß `/admin_panel` ‚Äî –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω–∞\n\n"
        "–ì–æ—Ç–æ–≤—ñ –¥–æ –ø—Ä–∏–≥–æ–¥? –ü–æ—á–Ω—ñ—Ç—å –∑ `/collect`! üöÄ",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def collect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    current_time = datetime.now()

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT last_collect FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        if result and result[0]:
            last_collect = datetime.fromisoformat(result[0])
            if (current_time - last_collect) < timedelta(hours=24):
                time_left = timedelta(hours=24) - (current_time - last_collect)
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes = remainder // 60
                await update.effective_message.reply_text(
                    f"‚è≥ **–ó–±—ñ—Ä –Ω–∞ –∫—É–ª–¥–∞—É–Ω—ñ!**\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: *{hours} –≥–æ–¥ {minutes} —Ö–≤*.",
                    parse_mode='Markdown'
                )
                return

        collected_items = []
        if EVENT["active"] and EVENT["type"] == 3 and EVENT["end_time"] > current_time:
            await update.effective_message.reply_text("‚öîÔ∏è **–ë–æ—Å-—ñ–≤–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∏–π!** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `/attack` –¥–ª—è –±–∏—Ç–≤–∏!", parse_mode='Markdown')
            return

        collect_count = 2 if EVENT["active"] and EVENT["type"] == 1 and random.random() < 0.7 else 1

        for _ in range(collect_count):
            rarity = random.choices(list(RARITIES.keys()), weights=[RARITIES[r]["prob"] for r in RARITIES], k=1)[0]
            available_items = [k for k, v in ITEMS.items() if not v.get("raid_only") and not v.get("guild_only")]
            available_familiars = [k for k, v in FAMILIARS.items() if not v.get("raid_only") and not v.get("event_only")]
            if random.random() < 0.5:
                item_id = random.choice(available_items)
                category = "–ø—Ä–µ–¥–º–µ—Ç"
                name = ITEMS[item_id]["name"]
                emoji = ITEMS[item_id]["emoji"]
            else:
                item_id = random.choice(available_familiars)
                category = "—Ñ–∞–º—ñ–ª—å—è—Ä"
                name = FAMILIARS[item_id]["name"]
                emoji = FAMILIARS[item_id]["emoji"]
            collected_items.append((category, item_id, name, rarity, emoji))
            if category == "—Ñ–∞–º—ñ–ª—å—è—Ä":
                c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (user_id, item_id, 0))
            c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (user_id, category, item_id, rarity))
        
        c.execute("UPDATE users SET last_collect = ? WHERE user_id = ?", (current_time.isoformat(), user_id))
        c.execute("UPDATE users SET exp = exp + ? WHERE user_id = ?", (10 * collect_count, user_id))
        conn.commit()

    messages = [f"{emoji} **{category.capitalize()}** (*{rarity}*): {name}" for category, _, name, rarity, emoji in collected_items]
    await update.effective_message.reply_text(f"üéâ **–í–∏ –∑–Ω–∞–π—à–ª–∏ —Å–∫–∞—Ä–±–∏!**\n\n" + "\n".join(messages), parse_mode='Markdown')

async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT item_type, item_id, rarity FROM collections WHERE user_id = ?", (user_id,))
        collection = c.fetchall()
        familiars_levels = get_familiars_levels(user_id)

    if not collection:
        await update.effective_message.reply_text("üòî **–Ü–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π.** –ü–æ—á–Ω—ñ—Ç—å –∑ `/collect`!", parse_mode='Markdown')
        return

    items = [f"{ITEMS[row[1]]['emoji']} **{ITEMS[row[1]]['name']}** (*{row[2]}*)" for row in collection if row[0] == "–ø—Ä–µ–¥–º–µ—Ç"]
    familiars = [f"{FAMILIARS[row[1]]['emoji']} **{FAMILIARS[row[1]]['name']}** (*{row[2]}*, —Ä—ñ–≤–µ–Ω—å {familiars_levels.get(row[1], 1)})" 
                 for row in collection if row[0] == "—Ñ–∞–º—ñ–ª—å—è—Ä"]

    items_text = "\n".join(items) if items else "–ø—É—Å—Ç–æ"
    familiars_text = "\n".join(familiars) if familiars else "–ø—É—Å—Ç–æ"

    await update.effective_message.reply_text(
        f"üìã **–¢–≤—ñ–π –Ü–Ω–≤–µ–Ω—Ç–∞—Ä** üìã\n\n"
        f"üó°Ô∏è **–ü—Ä–µ–¥–º–µ—Ç–∏** ({len(items)}):\n{items_text}\n\n"
        f"üêâ **–§–∞–º—ñ–ª—å—è—Ä–∏** ({len(familiars)}):\n{familiars_text}",
        parse_mode='Markdown'
    )

async def all_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
            # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
        with sqlite3.connect("collection_bot.db") as conn:
            c = conn.cursor()
            c.execute("SELECT item_type, item_id FROM collections WHERE user_id = ?", (user_id,))
            collection = c.fetchall()

        user_items = {row[1] for row in collection if row[0] == "–ø—Ä–µ–¥–º–µ—Ç"}
        user_familiars = {row[1] for row in collection if row[0] == "—Ñ–∞–º—ñ–ª—å—è—Ä"}

        # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –≤–∏–¥–∞–ª–∏–ª–∏ Markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        items_list = [f"{v['emoji']} {v['name']} (ID: {k}) {'‚úÖ' if k in user_items else '‚ùå'}" for k, v in ITEMS.items()]
        familiars_list = [f"{v['emoji']} {v['name']} (ID: {k}) {'‚úÖ' if k in user_familiars else '‚ùå'}" for k, v in FAMILIARS.items()]

        items_text = "\n".join(items_list) if items_list else "–ù–µ–º–∞—î –ø—Ä–µ–¥–º–µ—Ç—ñ–≤"
        familiars_text = "\n".join(familiars_list) if familiars_list else "–ù–µ–º–∞—î —Ñ–∞–º—ñ–ª—å—è—Ä—ñ–≤"

        # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
        full_text = f"üîç –ö–∞—Ç–∞–ª–æ–≥ –£—Å—ñ—Ö –°–∫–∞—Ä–±—ñ–≤ üîç\n\nüó°Ô∏è –ü—Ä–µ–¥–º–µ—Ç–∏:\n{items_text}\n\nüêâ –§–∞–º—ñ–ª—å—è—Ä–∏:\n{familiars_text}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Telegram –ª—ñ–º—ñ—Ç: 4096 —Å–∏–º–≤–æ–ª—ñ–≤)
        if len(full_text) > 4000:
            # –Ø–∫—â–æ –∑–∞–¥–æ–≤–≥–µ, —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            await update.effective_message.reply_text(f"üîç –ö–∞—Ç–∞–ª–æ–≥ –£—Å—ñ—Ö –°–∫–∞—Ä–±—ñ–≤ üîç\n\nüó°Ô∏è –ü—Ä–µ–¥–º–µ—Ç–∏:\n{items_text}")
            await asyncio.sleep(1)
            await update.effective_message.reply_text(f"üêâ –§–∞–º—ñ–ª—å—è—Ä–∏:\n{familiars_text}")
        else:
            await update.effective_message.reply_text(full_text)
                
    except Exception as e:
        print(f"Error in all_items function: {e}")
        if update.effective_message:
            await update.effective_message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É!")

async def start_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    if user_id not in ADMINS:
        await update.message.reply_text("üö´ **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!** –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤.", parse_mode='Markdown')
        return

    if len(context.args) != 3:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/start_event <—á–∞—Å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö> <–Ω–∞–∑–≤–∞> <—Ç–∏–ø 1-3>`", parse_mode='Markdown')
        return

    try:
        duration = int(context.args[0])
        event_name = context.args[1]
        event_type = int(context.args[2])
        if event_type not in [1, 2, 3]:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå **–ü–æ–º–∏–ª–∫–∞!** –ß–∞—Å ‚Äî —á–∏—Å–ª–æ, —Ç–∏–ø ‚Äî 1, 2 –∞–±–æ 3.", parse_mode='Markdown')
        return

    EVENT["active"] = True
    EVENT["type"] = event_type
    EVENT["name"] = event_name
    EVENT["end_time"] = datetime.now() + timedelta(minutes=duration)
    EVENT["boss_hp"] = 100000 if event_type == 3 else None
    EVENT["boss_id"] = 9999 if event_type == 3 else None

    event_desc = {
        1: "üìà **–ü–æ–¥–≤–æ—î–Ω–Ω—è —Å–∫–∞—Ä–±—ñ–≤!** –®–∞–Ω—Å –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞ `/collect`.",
        2: "üéÅ **–ü–æ–¥–∞—Ä—É–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö!** –ö–æ–∂–µ–Ω –æ—Ç—Ä–∏–º—É—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å–∫–∞—Ä–±.",
        3: f"‚öîÔ∏è **–ë–æ—Å {BOSSES[9999]['name']} {BOSSES[9999]['emoji']}** (100,000 HP)! –ê—Ç–∞–∫—É–π—Ç–µ `/attack`."
    }

    keyboard = [[InlineKeyboardButton("‚öîÔ∏è –ê—Ç–∞–∫—É–≤–∞—Ç–∏ –±–æ—Å–∞", callback_data="attack_boss")]] if event_type == 3 else []
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT user_id FROM users")
        users = c.fetchall()

    for user in users:
        try:
            await context.bot.send_message(
                chat_id=user[0],
                text=f"üéâ **–Ü–≤–µ–Ω—Ç '{event_name}' —Å—Ç–∞—Ä—Ç—É–≤–∞–≤!**\n\n{event_desc[event_type]}\n‚è∞ –¢—Ä–∏–≤–∞—î –¥–æ {EVENT['end_time'].strftime('%H:%M %d.%m')}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception:
            continue

    await update.message.reply_text(f"‚úÖ **–Ü–≤–µ–Ω—Ç '{event_name}' (—Ç–∏–ø {event_type}) –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ {duration} —Ö–≤!**", parse_mode='Markdown')

    if event_type == 2:
        with sqlite3.connect("collection_bot.db") as conn:
            c = conn.cursor()
            for user in users:
                user_id = user[0]
                rarity = random.choices(list(RARITIES.keys()), weights=[RARITIES[r]["prob"] for r in RARITIES], k=1)[0]
                available_items = [k for k, v in ITEMS.items() if not v.get("raid_only") and not v.get("guild_only")]
                available_familiars = [k for k, v in FAMILIARS.items() if not v.get("raid_only") and not v.get("event_only")]
                if random.random() < 0.5:
                    item_id = random.choice(available_items)
                    category = "–ø—Ä–µ–¥–º–µ—Ç"
                    name = ITEMS[item_id]["name"]
                    emoji = ITEMS[item_id]["emoji"]
                else:
                    item_id = random.choice(available_familiars)
                    category = "—Ñ–∞–º—ñ–ª—å—è—Ä"
                    name = FAMILIARS[item_id]["name"]
                    emoji = FAMILIARS[item_id]["emoji"]
                c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (user_id, category, item_id, rarity))
                if category == "—Ñ–∞–º—ñ–ª—å—è—Ä":
                    c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (user_id, item_id, 0))
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üéÅ **–Ü–≤–µ–Ω—Ç-–ø–æ–¥–∞—Ä—É–Ω–æ–∫ '{event_name}':** {emoji} **{category.capitalize()}** (*{rarity}*): {name}",
                        parse_mode='Markdown'
                    )
                except Exception:
                    continue
            conn.commit()

    async def check_event_end():
        await asyncio.sleep(duration * 60)
        if EVENT["active"] and EVENT["end_time"] <= datetime.now():
            EVENT["active"] = False
            message = f"üèÅ **–Ü–≤–µ–Ω—Ç '{EVENT['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**"
            if EVENT["type"] == 3 and EVENT["boss_hp"] > 0:
                message += f"\n{BOSSES[EVENT['boss_id']]['emoji']} **{BOSSES[EVENT['boss_id']]['name']}** –≤–∏—Å—Ç–æ—è–≤ ({EVENT['boss_hp']} HP)!"
            with sqlite3.connect("collection_bot.db") as conn:
                c = conn.cursor()
                c.execute("SELECT user_id FROM users")
                users = c.fetchall()
            for user in users:
                try:
                    await context.bot.send_message(chat_id=user[0], text=message, parse_mode='Markdown')
                except Exception:
                    continue
            EVENT.clear()
            EVENT.update({"active": False, "type": None, "name": None, "end_time": None, "boss_hp": None, "boss_id": None})

    asyncio.create_task(check_event_end())

async def attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    current_time = datetime.now()

    if not EVENT["active"] or EVENT["type"] != 3 or EVENT["end_time"] <= current_time:
        await update.effective_message.reply_text("üö´ **–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Å-—ñ–≤–µ–Ω—Ç—É!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT last_collect FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        if result and result[0]:
            last_attack = datetime.fromisoformat(result[0])
            if (current_time - last_attack) < timedelta(minutes=5):
                time_left = timedelta(minutes=5) - (current_time - last_attack)
                minutes, seconds = divmod(time_left.seconds, 60)
                await update.effective_message.reply_text(
                    f"‚è≥ **–ê—Ç–∞–∫–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω—ñ!**\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: *{minutes} —Ö–≤ {seconds} —Å–µ–∫*.",
                    parse_mode='Markdown'
                )
                return

        level, _ = get_level_and_title(user_id)
        c.execute("SELECT item_id, rarity FROM collections WHERE user_id = ? AND item_type = ?", (user_id, "–ø—Ä–µ–¥–º–µ—Ç"))
        items = c.fetchall()
        c.execute("SELECT item_id, rarity FROM collections WHERE user_id = ? AND item_type = ?", (user_id, "—Ñ–∞–º—ñ–ª—å—è—Ä"))
        familiars = c.fetchall()
        familiars_levels = get_familiars_levels(user_id)

        damage = 10 + level * 50
        for _, rarity in items:
            damage += RARITIES[rarity]["damage"]
        for item_id, rarity in familiars:
            damage += RARITIES[rarity]["damage"]
            damage += familiars_levels.get(item_id, 1)

        EVENT["boss_hp"] -= damage

        for item_id, _ in familiars:
            c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (user_id, item_id, 0))
            c.execute("UPDATE familiars_level SET exp = exp + ? WHERE user_id = ? AND item_id = ?", (damage, user_id, item_id))

        c.execute("UPDATE users SET exp = exp + ? WHERE user_id = ?", (damage // 10, user_id))
        c.execute("UPDATE users SET last_collect = ? WHERE user_id = ?", (current_time.isoformat(), user_id))

        if EVENT["boss_hp"] <= 0:
            EVENT["boss_hp"] = 0
            available_items = [k for k in ITEMS.keys() if not ITEMS[k].get("guild_only")]
            available_familiars = [k for k in FAMILIARS.keys()]
            item_id = random.choice(available_items + available_familiars)
            category = "–ø—Ä–µ–¥–º–µ—Ç" if item_id in ITEMS else "—Ñ–∞–º—ñ–ª—å—è—Ä"
            name = ITEMS[item_id]["name"] if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS[item_id]["name"]
            emoji = ITEMS[item_id]["emoji"] if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS[item_id]["emoji"]
            rarity = random.choices(list(RARITIES.keys()), weights=[RARITIES[r]["prob"] for r in RARITIES], k=1)[0]
            c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (user_id, category, item_id, rarity))
            if category == "—Ñ–∞–º—ñ–ª—å—è—Ä":
                c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (user_id, item_id, 0))
            conn.commit()
            await update.effective_message.reply_text(
                f"üéâ **{BOSSES[EVENT['boss_id']]['name']} {BOSSES[EVENT['boss_id']]['emoji']} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!**\n\n"
                f"üèÜ **–ù–∞–≥–æ—Ä–æ–¥–∞:** {emoji} **{category.capitalize()}** (*{rarity}*): {name}\n"
                f"üêâ –§–∞–º—ñ–ª—å—è—Ä–∏ –Ω–∞–±—Ä–∞–ª–∏ *{damage} EXP*.",
                parse_mode='Markdown'
            )
            with sqlite3.connect("collection_bot.db") as conn:
                c = conn.cursor()
                c.execute("SELECT user_id FROM users")
                users = c.fetchall()
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user[0],
                        text=f"üèÅ **–Ü–≤–µ–Ω—Ç '{EVENT['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n{BOSSES[EVENT['boss_id']]['emoji']} **{BOSSES[EVENT['boss_id']]['name']}** –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!",
                        parse_mode='Markdown'
                    )
                except Exception:
                    continue
            EVENT["active"] = False
        else:
            conn.commit()
            await update.effective_message.reply_text(
                f"‚öîÔ∏è **–ê—Ç–∞–∫–∞ –∑–∞–≤–¥–∞–ª–∞ {damage} —à–∫–æ–¥–∏ {BOSSES[EVENT['boss_id']]['name']} {BOSSES[EVENT['boss_id']]['emoji']}!**\n\n"
                f"‚ù§Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å HP: *{EVENT['boss_hp']}*\nüêâ –§–∞–º—ñ–ª—å—è—Ä–∏ –Ω–∞–±—Ä–∞–ª–∏ *{damage} EXP*.",
                parse_mode='Markdown'
            )

async def raid_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    current_time = datetime.now()

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/raid_attack <guild_id>`", parse_mode='Markdown')
        return

    guild_id = int(context.args[0])
    if guild_id not in GUILD_RAIDS or GUILD_RAIDS[guild_id]["end_time"] <= current_time:
        await update.message.reply_text("üö´ **–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–π–¥—É –≤ –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        user_guild = c.fetchone()
        if not user_guild or user_guild[0] != guild_id:
            await update.message.reply_text(f"üö´ **–í–∏ –Ω–µ —á–ª–µ–Ω –≥—ñ–ª—å–¥—ñ—ó ID {guild_id}!**", parse_mode='Markdown')
            return

        c.execute("SELECT last_collect FROM users WHERE user_id = ?", (user_id,))
        result = c.fetchone()
        if result and result[0]:
            last_attack = datetime.fromisoformat(result[0])
            if (current_time - last_attack) < timedelta(minutes=5):
                time_left = timedelta(minutes=5) - (current_time - last_attack)
                minutes, seconds = divmod(time_left.seconds, 60)
                await update.message.reply_text(
                    f"‚è≥ **–ê—Ç–∞–∫–∞ –Ω–∞ –∫—É–ª–¥–∞—É–Ω—ñ!**\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: *{minutes} —Ö–≤ {seconds} —Å–µ–∫*.",
                    parse_mode='Markdown'
                )
                return

        level, _ = get_level_and_title(user_id)
        c.execute("SELECT item_id, rarity FROM collections WHERE user_id = ? AND item_type = ?", (user_id, "–ø—Ä–µ–¥–º–µ—Ç"))
        items = c.fetchall()
        c.execute("SELECT item_id, rarity FROM collections WHERE user_id = ? AND item_type = ?", (user_id, "—Ñ–∞–º—ñ–ª—å—è—Ä"))
        familiars = c.fetchall()
        familiars_levels = get_familiars_levels(user_id)

        damage = 10 + level * 50
        for _, rarity in items:
            damage += RARITIES[rarity]["damage"]
        for item_id, rarity in familiars:
            damage += RARITIES[rarity]["damage"]
            damage += familiars_levels.get(item_id, 1)

        GUILD_RAIDS[guild_id]["boss_hp"] -= damage
        boss_id = GUILD_RAIDS[guild_id]["boss_id"]

        for item_id, _ in familiars:
            c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (user_id, item_id, 0))
            c.execute("UPDATE familiars_level SET exp = exp + ? WHERE user_id = ? AND item_id = ?", (damage, user_id, item_id))

        c.execute("UPDATE users SET exp = exp + ? WHERE user_id = ?", (damage // 10, user_id))
        c.execute("UPDATE users SET last_collect = ? WHERE user_id = ?", (current_time.isoformat(), user_id))

        if guild_id in GUILD_WARS:
            c.execute("UPDATE guild_wars SET damage = damage + ? WHERE guild_id = ?", (damage, guild_id))

        if GUILD_RAIDS[guild_id]["boss_hp"] <= 0:
            GUILD_RAIDS[guild_id]["boss_hp"] = 0
            available_items = [k for k in ITEMS.keys()]
            available_familiars = [k for k in FAMILIARS.keys() if not FAMILIARS[k].get("event_only")]
            item_id = random.choice(available_items + available_familiars)
            category = "–ø—Ä–µ–¥–º–µ—Ç" if item_id in ITEMS else "—Ñ–∞–º—ñ–ª—å—è—Ä"
            name = ITEMS[item_id]["name"] if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS[item_id]["name"]
            emoji = ITEMS[item_id]["emoji"] if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS[item_id]["emoji"]
            rarity = random.choices(list(RARITIES.keys()), weights=[RARITIES[r]["prob"] for r in RARITIES], k=1)[0]
            c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (user_id, category, item_id, rarity))
            if category == "—Ñ–∞–º—ñ–ª—å—è—Ä":
                c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (user_id, item_id, 0))
            conn.commit()
            await update.message.reply_text(
                f"üéâ **{BOSSES[boss_id]['name']} {BOSSES[boss_id]['emoji']} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!**\n\n"
                f"üèÜ **–ù–∞–≥–æ—Ä–æ–¥–∞:** {emoji} **{category.capitalize()}** (*{rarity}*): {name}\n"
                f"üêâ –§–∞–º—ñ–ª—å—è—Ä–∏ –Ω–∞–±—Ä–∞–ª–∏ *{damage} EXP*.",
                parse_mode='Markdown'
            )
            c.execute("SELECT user_id FROM guild_members WHERE guild_id = ?", (guild_id,))
            members = c.fetchall()
            for member in members:
                try:
                    await context.bot.send_message(
                        chat_id=member[0],
                        text=f"üèÅ **–†–µ–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n{BOSSES[boss_id]['emoji']} **{BOSSES[boss_id]['name']}** –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!",
                        parse_mode='Markdown'
                    )
                except Exception:
                    continue
            del GUILD_RAIDS[guild_id]
        else:
            conn.commit()
            await update.message.reply_text(
                f"‚öîÔ∏è **–ê—Ç–∞–∫–∞ –∑–∞–≤–¥–∞–ª–∞ {damage} —à–∫–æ–¥–∏ {BOSSES[boss_id]['name']} {BOSSES[boss_id]['emoji']}!**\n\n"
                f"‚ù§Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å HP: *{GUILD_RAIDS[guild_id]['boss_hp']}*\nüêâ –§–∞–º—ñ–ª—å—è—Ä–∏ –Ω–∞–±—Ä–∞–ª–∏ *{damage} EXP*.",
                parse_mode='Markdown'
            )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
            # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
        username = update.effective_user.username or str(user_id)
        
        print(f"Debug: Processing profile for user_id: {user_id}, username: {username}")

        with sqlite3.connect("collection_bot.db") as conn:
            c = conn.cursor()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è users
            c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            if not c.fetchone():
                await update.effective_message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: —Ç–∞–±–ª–∏—Ü—è users –Ω–µ —ñ—Å–Ω—É—î!")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
            user_exists = c.fetchone()[0] > 0
            
            print(f"Debug: User exists: {user_exists}")
            
            if not user_exists:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                c.execute("INSERT INTO users (user_id, username, exp, bio, last_collect) VALUES (?, ?, ?, ?, ?)", 
                         (user_id, username, 0, "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", datetime.now().isoformat()))
                conn.commit()
                print(f"Debug: Created new user with id: {user_id}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ username
            c.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é
            c.execute("SELECT exp, bio, custom_title FROM users WHERE user_id = ?", (user_id,))
            result = c.fetchone()
            
            print(f"Debug: Database result: {result}")
            
            if result:
                exp = result[0] if result[0] is not None else 0
                bio = result[1] if result[1] is not None else "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                custom_title = result[2]
                level = math.floor(math.sqrt(exp)) if exp > 0 else 0
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç–∏—Ç—É–ª
                title = "–ù–æ–≤–∞—á–æ–∫"
                for threshold, title_name in sorted(TITLES.items(), reverse=True):
                    if level >= threshold:
                        title = title_name
                        break
                
                if custom_title:
                    title = custom_title
                    
                print(f"Debug: exp={exp}, level={level}, title={title}, bio={bio}")
                
                # –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ effective_message –∑–∞–º—ñ—Å—Ç—å message
                await update.effective_message.reply_text(
                    f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å –ö–æ–ª–µ—Ü—ñ–æ–Ω–µ—Ä–∞ üë§\n\n"
                    f"-------------------\n"
                    f"üÜî ID: {user_id}\n"
                    f"-------------------\n"
                    f"üìõ –Ü–º'—è: {username}\n"
                    f"-------------------\n"
                    f"üèÜ –¢–∏—Ç—É–ª: {title}\n"
                    f"-------------------\n"
                    f"üìä –†—ñ–≤–µ–Ω—å: {level}\n"
                    f"-------------------\n"
                    f"‚≠ê EXP: {exp}\n"
                    f"-------------------\n"
                    f"üìú –ë—ñ–æ: {bio}"
                )
            else:
                await update.effective_message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é!")
                
    except Exception as e:
        print(f"Error in profile function: {e}")
        if update.effective_message:
            await update.effective_message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é!")

async def title_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    titles_text = "\n".join([f"üèÜ **{title}** (–†—ñ–≤–µ–Ω—å {level})" for level, title in sorted(TITLES.items())])
    await update.message.reply_text(f"üìú **–°–ø–∏—Å–æ–∫ –¢–∏—Ç—É–ª—ñ–≤:**\n\n{titles_text}", parse_mode='Markdown')

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with sqlite3.connect("collection_bot.db") as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, username, exp FROM users WHERE exp > 0 ORDER BY exp DESC LIMIT 10")
            top_users = c.fetchall()

        if not top_users:
            await update.effective_message.reply_text("üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π! –ü–æ—á–Ω—ñ—Ç—å –∑–±–∏—Ä–∞—Ç–∏ —Å–∫–∞—Ä–±–∏ –∑ /collect.")
            return

        leaderboard_text = "\n".join(
            f"{i+1}. @{row[1] if row[1] else row[0]} ‚Äî –†—ñ–≤–µ–Ω—å {math.floor(math.sqrt(row[2]))} (EXP: {row[2]})" 
            for i, row in enumerate(top_users)
        )
        
        await update.effective_message.reply_text(f"üèÜ –¢–æ–ø-10 –ì–µ—Ä–æ—ó–≤:\n\n{leaderboard_text}")
                
    except Exception as e:
        print(f"Error in leaderboard function: {e}")
        if update.effective_message:
            await update.effective_message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥—É!")

async def leaderboard_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id, name FROM guilds")
        guilds = c.fetchall()
        
        guild_levels = []
        for guild_id, guild_name in guilds:
            c.execute("SELECT SUM(exp) FROM users JOIN guild_members ON users.user_id = guild_members.user_id WHERE guild_id = ?", (guild_id,))
            total_exp = c.fetchone()[0] or 0
            guild_levels.append((guild_name, math.floor(math.sqrt(total_exp))))
        
        guild_levels = sorted(guild_levels, key=lambda x: x[1], reverse=True)[:10]

    if not guild_levels:
        await update.effective_message.reply_text("üè∞ **–†–µ–π—Ç–∏–Ω–≥ –≥—ñ–ª—å–¥—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π!** –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à—É.", parse_mode='Markdown')
        return

    leaderboard_text = "\n".join(
        f"{i+1}. **{name}** ‚Äî –°—É–º–∞—Ä–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: *{level}*" for i, (name, level) in enumerate(guild_levels)
    )
    await update.effective_message.reply_text(f"üè∞ **–¢–æ–ø-10 –ì—ñ–ª—å–¥—ñ–π:**\n\n{leaderboard_text}", parse_mode='Markdown')

async def set_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    if not context.args:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/set_bio <—Ç–µ–∫—Å—Ç>`", parse_mode='Markdown')
        return

    bio = " ".join(context.args)
    if len(bio) > 50:
        await update.message.reply_text("‚ùå **–ë—ñ–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 50 —Å–∏–º–≤–æ–ª—ñ–≤!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("UPDATE users SET bio = ? WHERE user_id = ?", (bio, user_id))
        conn.commit()

    await update.message.reply_text(f"üìù **–ë—ñ–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:** *{bio}*", parse_mode='Markdown')

async def create_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    if not context.args:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/create_guild <–Ω–∞–∑–≤–∞>`", parse_mode='Markdown')
        return

    guild_name = " ".join(context.args)
    if len(guild_name) > 50:
        await update.message.reply_text("‚ùå **–ù–∞–∑–≤–∞ –≥—ñ–ª—å–¥—ñ—ó –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–æ—é –∑–∞ 50 —Å–∏–º–≤–æ–ª—ñ–≤!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        if c.fetchone():
            await update.message.reply_text("üö´ **–í–∏ –≤–∂–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!** –í–∏–π–¥—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É: `/leave_guild`", parse_mode='Markdown')
            return

        c.execute("INSERT INTO guilds (name, leader_id) VALUES (?, ?)", (guild_name, user_id))
        guild_id = c.lastrowid
        c.execute("INSERT INTO guild_members (guild_id, user_id) VALUES (?, ?)", (guild_id, user_id))
        conn.commit()

    await update.message.reply_text(f"üè∞ **–ì—ñ–ª—å–¥—ñ—è '{guild_name}' (ID: {guild_id}) —Å—Ç–≤–æ—Ä–µ–Ω–∞!** –í–∏ ‚Äî –ª—ñ–¥–µ—Ä. üëë", parse_mode='Markdown')

async def join_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/join_guild <ID>`", parse_mode='Markdown')
        return

    guild_id = int(context.args[0])
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        if c.fetchone():
            await update.message.reply_text("üö´ **–í–∏ –≤–∂–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!** –í–∏–π–¥—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É: `/leave_guild`", parse_mode='Markdown')
            return

        c.execute("SELECT name FROM guilds WHERE guild_id = ?", (guild_id,))
        guild = c.fetchone()
        if not guild:
            await update.message.reply_text(f"‚ùå **–ì—ñ–ª—å–¥—ñ—è –∑ ID {guild_id} –Ω–µ —ñ—Å–Ω—É—î!**", parse_mode='Markdown')
            return

        c.execute("INSERT INTO guild_members (guild_id, user_id) VALUES (?, ?)", (guild_id, user_id))
        conn.commit()

    await update.message.reply_text(f"üö™ **–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ '{guild[0]}' (ID: {guild_id})!** üéâ", parse_mode='Markdown')

async def leave_guild(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        guild = c.fetchone()
        if not guild:
            await update.message.reply_text("üö´ **–í–∏ –Ω–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
            return

        guild_id = guild[0]
        c.execute("SELECT leader_id, co_leader_id FROM guilds WHERE guild_id = ?", (guild_id,))
        guild_info = c.fetchone()
        if guild_info[0] == user_id:
            await update.message.reply_text("üö´ **–õ—ñ–¥–µ—Ä –Ω–µ –º–æ–∂–µ –ø–æ–∫–∏–Ω—É—Ç–∏ –≥—ñ–ª—å–¥—ñ—é!**", parse_mode='Markdown')
            return

        c.execute("DELETE FROM guild_members WHERE user_id = ?", (user_id,))
        if guild_info[1] == user_id:
            c.execute("UPDATE guilds SET co_leader_id = NULL WHERE guild_id = ?", (guild_id,))
        conn.commit()

    await update.message.reply_text("üö∂ **–í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—ñ–ª—å–¥—ñ—é!** üòî", parse_mode='Markdown')

async def set_co_leader(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    if not context.args:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/set_co_leader <–Ω—ñ–∫–Ω–µ–π–º/ID>`", parse_mode='Markdown')
        return

    co_leader_id = resolve_user_id(context.args[0], context)
    if not co_leader_id:
        await update.message.reply_text("‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        guild = c.fetchone()
        if not guild:
            await update.message.reply_text("üö´ **–í–∏ –Ω–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
            return

        guild_id = guild[0]
        c.execute("SELECT leader_id FROM guilds WHERE guild_id = ?", (guild_id,))
        leader_id = c.fetchone()
        if not leader_id or leader_id[0] != user_id:
            await update.message.reply_text("üö´ **–¢—ñ–ª—å–∫–∏ –ª—ñ–¥–µ—Ä –º–æ–∂–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–æ-–ª—ñ–¥–µ—Ä–∞!**", parse_mode='Markdown')
            return

        c.execute("SELECT user_id FROM guild_members WHERE guild_id = ? AND user_id = ?", (guild_id, co_leader_id))
        if not c.fetchone():
            await update.message.reply_text("‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —á–ª–µ–Ω–æ–º –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
            return

        c.execute("UPDATE guilds SET co_leader_id = ? WHERE guild_id = ?", (co_leader_id, guild_id))
        conn.commit()

    await update.message.reply_text(f"üëë **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á (ID: {co_leader_id}) –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —Å–æ-–ª—ñ–¥–µ—Ä–æ–º!**", parse_mode='Markdown')

async def guild_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id, name FROM guilds")
        guilds = c.fetchall()

    if not guilds:
        await update.message.reply_text("üè∞ **–ì—ñ–ª—å–¥—ñ–π –Ω–µ–º–∞—î!** –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤–æ—é: `/create_guild`", parse_mode='Markdown')
        return

    guild_text = "\n".join([f"üè∞ **{g[1]}** (ID: {g[0]})" for g in guilds])
    await update.message.reply_text(f"üìú **–°–ø–∏—Å–æ–∫ –ì—ñ–ª—å–¥—ñ–π:**\n\n{guild_text}", parse_mode='Markdown')

async def guild_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        guild = c.fetchone()
        if not guild:
            await update.message.reply_text("üö´ **–í–∏ –Ω–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
            return

        guild_id = guild[0]
        c.execute("SELECT name, leader_id, co_leader_id FROM guilds WHERE guild_id = ?", (guild_id,))
        guild_info = c.fetchone()
        c.execute("SELECT user_id, username FROM guild_members JOIN users ON guild_members.user_id = users.user_id WHERE guild_id = ?", (guild_id,))
        members = c.fetchall()

    members_text = "\n".join([f"üë§ **@{m[1] if m[1] else m[0]}**{' (–õ—ñ–¥–µ—Ä)' if m[0] == guild_info[1] else ' (–°–æ-–ª—ñ–¥–µ—Ä)' if m[0] == guild_info[2] else ''}" for m in members])
    await update.message.reply_text(f"üë• **–ì—ñ–ª—å–¥—ñ—è '{guild_info[0]}' (ID: {guild_id}):**\n\n{members_text}", parse_mode='Markdown')

async def start_raid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    current_time = datetime.now()

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        guild = c.fetchone()
        if not guild:
            await update.message.reply_text("üö´ **–í–∏ –Ω–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
            return

        guild_id = guild[0]
        c.execute("SELECT leader_id, co_leader_id, last_raid FROM guilds WHERE guild_id = ?", (guild_id,))
        guild_info = c.fetchone()
        if user_id not in [guild_info[0], guild_info[1]]:
            await update.message.reply_text("üö´ **–¢—ñ–ª—å–∫–∏ –ª—ñ–¥–µ—Ä –∞–±–æ —Å–æ-–ª—ñ–¥–µ—Ä –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–π–¥!**", parse_mode='Markdown')
            return

        if guild_info[2]:
            last_raid = datetime.fromisoformat(guild_info[2])
            if (current_time - last_raid) < timedelta(hours=3):
                time_left = timedelta(hours=3) - (current_time - last_raid)
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes = remainder // 60
                await update.message.reply_text(f"‚è≥ **–†–µ–π–¥ –Ω–∞ –∫—É–ª–¥–∞—É–Ω—ñ!** –ó–∞–ª–∏—à–∏–ª–æ—Å—å: *{hours} –≥–æ–¥ {minutes} —Ö–≤*.", parse_mode='Markdown')
                return

        boss_id = random.choice([k for k in BOSSES.keys() if k != 9999])
        GUILD_RAIDS[guild_id] = {
            "end_time": current_time + timedelta(minutes=30),
            "boss_hp": 100000,
            "boss_id": boss_id
        }
        c.execute("UPDATE guilds SET last_raid = ? WHERE guild_id = ?", (current_time.isoformat(), guild_id))
        conn.commit()

        c.execute("SELECT user_id FROM guild_members WHERE guild_id = ?", (guild_id,))
        members = c.fetchall()

    for member in members:
        try:
            await context.bot.send_message(
                chat_id=member[0],
                text=f"üõ°Ô∏è **–†–µ–π–¥-–±–æ—Å {BOSSES[boss_id]['name']} {BOSSES[boss_id]['emoji']} –∑'—è–≤–∏–≤—Å—è!**\n\n"
                     f"‚ù§Ô∏è HP: *100,000*\n‚öîÔ∏è –ê—Ç–∞–∫—É–π—Ç–µ: `/raid_attack {guild_id}`\n‚è∞ –¢—Ä–∏–≤–∞—î –¥–æ {GUILD_RAIDS[guild_id]['end_time'].strftime('%H:%M %d.%m')}",
                parse_mode='Markdown'
            )
        except Exception:
            continue

    await update.message.reply_text(f"üõ°Ô∏è **–†–µ–π–¥ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –≥—ñ–ª—å–¥—ñ—ó ID {guild_id}!** –ë–∏–π—Ç–µ –±–æ—Å–∞ {BOSSES[boss_id]['name']}.", parse_mode='Markdown')

    async def check_raid_end():
        await asyncio.sleep(30 * 60)
        if guild_id in GUILD_RAIDS and GUILD_RAIDS[guild_id]["end_time"] <= datetime.now():
            boss_hp = GUILD_RAIDS[guild_id]["boss_hp"]
            boss_name = BOSSES[GUILD_RAIDS[guild_id]["boss_id"]]["name"]
            boss_emoji = BOSSES[GUILD_RAIDS[guild_id]["boss_id"]]["emoji"]
            with sqlite3.connect("collection_bot.db") as conn:
                c = conn.cursor()
                c.execute("SELECT user_id FROM guild_members WHERE guild_id = ?", (guild_id,))
                members = c.fetchall()
            message = f"üèÅ **–†–µ–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n{boss_emoji} **{boss_name}** {'–≤–∏—Å—Ç–æ—è–≤ (*' + str(boss_hp) + '* HP)' if boss_hp > 0 else '–ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!'}"
            for member in members:
                try:
                    await context.bot.send_message(chat_id=member[0], text=message, parse_mode='Markdown')
                except Exception:
                    continue
            del GUILD_RAIDS[guild_id]

    asyncio.create_task(check_raid_end())

async def guild_war(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
        # –¶–ï–ô –ë–õ–û–ö ‚¨áÔ∏è
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM users WHERE user_id = ?", (user_id,))
        if c.fetchone()[0] == 0:
            await update.message.reply_text("‚ö†Ô∏è **–°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start**")
            return
    # –¶–ï–ô –ë–õ–û–ö ‚¨ÜÔ∏è
    current_time = datetime.now()

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/guild_war <guild_id>`", parse_mode='Markdown')
        return

    opponent_guild_id = int(context.args[0])
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT guild_id FROM guild_members WHERE user_id = ?", (user_id,))
        guild = c.fetchone()
        if not guild:
            await update.message.reply_text("üö´ **–í–∏ –Ω–µ –≤ –≥—ñ–ª—å–¥—ñ—ó!**", parse_mode='Markdown')
            return

        guild_id = guild[0]
        c.execute("SELECT leader_id, co_leader_id FROM guilds WHERE guild_id = ?", (guild_id,))
        guild_info = c.fetchone()
        if user_id not in [guild_info[0], guild_info[1]]:
            await update.message.reply_text("üö´ **–¢—ñ–ª—å–∫–∏ –ª—ñ–¥–µ—Ä –∞–±–æ —Å–æ-–ª—ñ–¥–µ—Ä –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –≤—ñ–π–Ω—É!**", parse_mode='Markdown')
            return

        c.execute("SELECT name FROM guilds WHERE guild_id = ?", (opponent_guild_id,))
        opponent_guild = c.fetchone()
        if not opponent_guild:
            await update.message.reply_text(f"‚ùå **–ì—ñ–ª—å–¥—ñ—è –∑ ID {opponent_guild_id} –Ω–µ —ñ—Å–Ω—É—î!**", parse_mode='Markdown')
            return

        if guild_id == opponent_guild_id:
            await update.message.reply_text("üö´ **–ù–µ –º–æ–∂–Ω–∞ –≤–æ—é–≤–∞—Ç–∏ –∑ —Å–æ–±–æ—é!**", parse_mode='Markdown')
            return

        c.execute("SELECT guild_id FROM guild_wars WHERE guild_id IN (?, ?)", (guild_id, opponent_guild_id))
        if c.fetchone():
            await update.message.reply_text("üö´ **–û–¥–Ω–∞ –∑ –≥—ñ–ª—å–¥—ñ–π —É–∂–µ –≤ –≤—ñ–π–Ω—ñ!**", parse_mode='Markdown')
            return

        c.execute("SELECT name FROM guilds WHERE guild_id = ?", (guild_id,))
        guild_name = c.fetchone()[0]
        c.execute("SELECT user_id FROM guild_members WHERE guild_id = ?", (guild_id,))
        guild_members = [m[0] for m in c.fetchall()]
        c.execute("SELECT user_id FROM guild_members WHERE guild_id = ?", (opponent_guild_id,))
        opponent_members = [m[0] for m in c.fetchall()]

        boss_id = random.choice([k for k in BOSSES.keys() if k != 9999])
        GUILD_RAIDS[guild_id] = {
            "end_time": current_time + timedelta(minutes=60),
            "boss_hp": 100000,
            "boss_id": boss_id
        }
        GUILD_RAIDS[opponent_guild_id] = {
            "end_time": current_time + timedelta(minutes=60),
            "boss_hp": 100000,
            "boss_id": boss_id
        }
        GUILD_WARS[guild_id] = {
            "opponent_id": opponent_guild_id,
            "damage": 0,
            "end_time": current_time + timedelta(minutes=60),
            "boss_id": boss_id
        }
        GUILD_WARS[opponent_guild_id] = {
            "opponent_id": guild_id,
            "damage": 0,
            "end_time": current_time + timedelta(minutes=60),
            "boss_id": boss_id
        }
        c.execute("INSERT INTO guild_wars (guild_id, opponent_id, damage, end_time, boss_id) VALUES (?, ?, ?, ?, ?)",
                  (guild_id, opponent_guild_id, 0, current_time.isoformat(), boss_id))
        c.execute("INSERT INTO guild_wars (guild_id, opponent_id, damage, end_time, boss_id) VALUES (?, ?, ?, ?, ?)",
                  (opponent_guild_id, guild_id, 0, current_time.isoformat(), boss_id))
        conn.commit()

    for member_id in guild_members + opponent_members:
        target_guild_id = guild_id if member_id in guild_members else opponent_guild_id
        try:
            await context.bot.send_message(
                chat_id=member_id,
                text=f"‚öîÔ∏è **–ì—ñ–ª—å–¥—ñ–π—Å—å–∫–∞ –≤—ñ–π–Ω–∞: '{guild_name}' (ID: {guild_id}) vs '{opponent_guild[0]}' (ID: {opponent_guild_id})!**\n\n"
                     f"–ë–∏–π—Ç–µ –±–æ—Å–∞ {BOSSES[boss_id]['name']} {BOSSES[boss_id]['emoji']} (`/raid_attack {target_guild_id}`)\n"
                     f"‚è∞ –¢—Ä–∏–≤–∞—î –¥–æ {GUILD_WARS[guild_id]['end_time'].strftime('%H:%M %d.%m')}",
                parse_mode='Markdown'
            )
        except Exception:
            continue

    await update.message.reply_text(f"‚öîÔ∏è **–í—ñ–π–Ω–∞ –º—ñ–∂ ID {guild_id} —Ç–∞ ID {opponent_guild_id} —Ä–æ–∑–ø–æ—á–∞—Ç–∞!**", parse_mode='Markdown')

    async def check_war_end():
        await asyncio.sleep(60 * 60)
        if guild_id in GUILD_WARS and GUILD_WARS[guild_id]["end_time"] <= datetime.now():
            with sqlite3.connect("collection_bot.db") as conn:
                c = conn.cursor()
                c.execute("SELECT guild_id, name FROM guilds WHERE guild_id IN (?, ?)", (guild_id, opponent_guild_id))
                guilds = c.fetchall()
                guild_name = next(g[1] for g in guilds if g[0] == guild_id)
                opponent_name = next(g[1] for g in guilds if g[0] == opponent_guild_id)
                c.execute("SELECT guild_id, damage FROM guild_wars WHERE guild_id IN (?, ?)", (guild_id, opponent_guild_id))
                damages = c.fetchall()

                guild_damage = next(d[1] for d in damages if d[0] == guild_id)
                opponent_damage = next(d[1] for d in damages if d[0] == opponent_guild_id)
                winner_id = guild_id if guild_damage > opponent_damage else opponent_guild_id if opponent_damage > guild_damage else None
                winner_name = guild_name if guild_damage > opponent_damage else opponent_name if opponent_damage > guild_damage else None

                message = f"üèÅ **–ì—ñ–ª—å–¥—ñ–π—Å—å–∫–∞ –≤—ñ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                if winner_id:
                    item_id = random.choice([12, 13, 14])
                    rarity = "legendary"
                    c.execute("SELECT user_id FROM guild_members WHERE guild_id = ?", (winner_id,))
                    members = c.fetchall()
                    for member in members:
                        c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (member[0], "–ø—Ä–µ–¥–º–µ—Ç", item_id, rarity))
                    conn.commit()
                    message += f"üèÜ **–ü–µ—Ä–µ–º–æ–≥–ª–∞ '{winner_name}' (ID: {winner_id})!**\n"
                    message += f"üéÅ **–ù–∞–≥–æ—Ä–æ–¥–∞:** {ITEMS[item_id]['emoji']} **{ITEMS[item_id]['name']}** (*{rarity}*) –¥–ª—è –≤—Å—ñ—Ö —á–ª–µ–Ω—ñ–≤!"
                else:
                    message += "ü§ù **–ù—ñ—á–∏—è!**"

                c.execute("SELECT user_id FROM guild_members WHERE guild_id IN (?, ?)", (guild_id, opponent_guild_id))
                members = c.fetchall()
                for member in members:
                    try:
                        await context.bot.send_message(chat_id=member[0], text=message, parse_mode='Markdown')
                    except Exception:
                        continue
                
                c.execute("DELETE FROM guild_wars WHERE guild_id IN (?, ?)", (guild_id, opponent_guild_id))
                conn.commit()
            
            if guild_id in GUILD_RAIDS:
                del GUILD_RAIDS[guild_id]
            if opponent_guild_id in GUILD_RAIDS:
                del GUILD_RAIDS[opponent_guild_id]
            if guild_id in GUILD_WARS:
                del GUILD_WARS[guild_id]
            if opponent_guild_id in GUILD_WARS:
                del GUILD_WARS[opponent_guild_id]

    asyncio.create_task(check_war_end())

async def give_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("üö´ **–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞!**", parse_mode='Markdown')
        return

    if len(context.args) != 3 or context.args[1] not in ["–ø—Ä–µ–¥–º–µ—Ç", "—Ñ–∞–º—ñ–ª—å—è—Ä"] or context.args[2] not in RARITIES:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/give_item <–Ω—ñ–∫–Ω–µ–π–º/ID> <–ø—Ä–µ–¥–º–µ—Ç/—Ñ–∞–º—ñ–ª—å—è—Ä> <—Ä—ñ–¥–∫—ñ—Å—Ç—å>`", parse_mode='Markdown')
        return

    target_user_id = resolve_user_id(context.args[0], context)
    if not target_user_id:
        await update.message.reply_text("‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**", parse_mode='Markdown')
        return

    category = context.args[1]
    rarity = context.args[2]
    items = ITEMS if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS
    available_items = [k for k, v in items.items() if not v.get("raid_only") and not v.get("guild_only") and not v.get("event_only")]
    if not available_items:
        await update.message.reply_text("‚ùå **–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞—á—ñ!**", parse_mode='Markdown')
        return
    item_id = random.choice(available_items)
    name = items[item_id]["name"]
    emoji = items[item_id]["emoji"]

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (target_user_id,))
        c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (target_user_id, category, item_id, rarity))
        if category == "—Ñ–∞–º—ñ–ª—å—è—Ä":
            c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (target_user_id, item_id, 0))
        conn.commit()

    await update.message.reply_text(f"‚úÖ **–í–∏–¥–∞–Ω–æ:** {emoji} **{category.capitalize()}** (*{rarity}*): {name} (ID: {target_user_id})", parse_mode='Markdown')
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"üéÅ **–û—Ç—Ä–∏–º–∞–Ω–æ:** {emoji} **{category.capitalize()}** (*{rarity}*): {name}", parse_mode='Markdown')
    except Exception:
        pass

async def create_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("üö´ **–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞!**", parse_mode='Markdown')
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/create_title <–Ω—ñ–∫–Ω–µ–π–º/ID> <—Ç–∏—Ç—É–ª>`", parse_mode='Markdown')
        return

    target_user_id = resolve_user_id(context.args[0], context)
    if not target_user_id:
        await update.message.reply_text("‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**", parse_mode='Markdown')
        return

    custom_title = " ".join(context.args[1:])
    if len(custom_title) > 50:
        await update.message.reply_text("‚ùå **–¢–∏—Ç—É–ª –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 50 —Å–∏–º–≤–æ–ª—ñ–≤!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (target_user_id,))
        c.execute("UPDATE users SET custom_title = ? WHERE user_id = ?", (custom_title, target_user_id))
        conn.commit()

    await update.message.reply_text(f"‚úÖ **–¢–∏—Ç—É–ª '{custom_title}' –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ID {target_user_id}!**", parse_mode='Markdown')
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"üèÜ **–ù–æ–≤–∏–π —Ç–∏—Ç—É–ª:** *{custom_title}*!", parse_mode='Markdown')
    except Exception:
        pass

async def set_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("üö´ **–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤!**", parse_mode='Markdown')
        return

    if len(context.args) != 2 or not context.args[1].isdigit():
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/set_level <–Ω—ñ–∫–Ω–µ–π–º/ID> <exp>`", parse_mode='Markdown')
        return

    target_user_id = resolve_user_id(context.args[0], context)
    if not target_user_id:
        await update.message.reply_text("‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**", parse_mode='Markdown')
        return

    exp = int(context.args[1])
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (target_user_id,))
        c.execute("UPDATE users SET exp = ? WHERE user_id = ?", (exp, target_user_id))
        conn.commit()

    level = math.floor(math.sqrt(exp))
    await update.message.reply_text(f"‚úÖ **–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {exp} EXP –¥–ª—è ID {target_user_id}.** –†—ñ–≤–µ–Ω—å: *{level}*", parse_mode='Markdown')
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"üîß **–í–∞—à —Ä—ñ–≤–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ:** *{level}* (EXP: {exp})", parse_mode='Markdown')
    except Exception:
        pass

async def gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if len(context.args) != 2 or not context.args[1].isdigit():
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/gift <–Ω—ñ–∫–Ω–µ–π–º/ID> <item_id>`", parse_mode='Markdown')
        return

    target_user_id = resolve_user_id(context.args[0], context)
    if not target_user_id:
        await update.message.reply_text("‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**", parse_mode='Markdown')
        return

    if target_user_id == user_id:
        await update.message.reply_text("üö´ **–ù–µ –º–æ–∂–Ω–∞ –¥–∞—Ä—É–≤–∞—Ç–∏ —Å–æ–±—ñ!**", parse_mode='Markdown')
        return

    item_id = int(context.args[1])
    if item_id not in ITEMS and item_id not in FAMILIARS:
        await update.message.reply_text("‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID —Å–∫–∞—Ä–±—É!**", parse_mode='Markdown')
        return

    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT item_type, rarity FROM collections WHERE user_id = ? AND item_id = ? LIMIT 1", (user_id, item_id))
        item = c.fetchone()
        if not item:
            await update.message.reply_text("‚ùå **–£ –≤–∞—Å –Ω–µ–º–∞—î —Ü—å–æ–≥–æ —Å–∫–∞—Ä–±—É!**", parse_mode='Markdown')
            return

        category, rarity = item
        c.execute("DELETE FROM collections WHERE user_id = ? AND item_id = ? AND rarity = ? LIMIT 1", (user_id, item_id, rarity))
        c.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (target_user_id,))
        c.execute("INSERT INTO collections (user_id, item_type, item_id, rarity) VALUES (?, ?, ?, ?)", (target_user_id, category, item_id, rarity))
        if category == "—Ñ–∞–º—ñ–ª—å—è—Ä":
            c.execute("INSERT OR IGNORE INTO familiars_level (user_id, item_id, exp) VALUES (?, ?, ?)", (target_user_id, item_id, 0))
        conn.commit()

    name = ITEMS[item_id]["name"] if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS[item_id]["name"]
    emoji = ITEMS[item_id]["emoji"] if category == "–ø—Ä–µ–¥–º–µ—Ç" else FAMILIARS[item_id]["emoji"]
    await update.message.reply_text(f"üéÅ **–ü–æ–¥–∞—Ä—É–Ω–æ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:** {emoji} **{category.capitalize()}** (*{rarity}*): {name} –¥–ª—è ID {target_user_id}", parse_mode='Markdown')
    try:
        await context.bot.send_message(chat_id=target_user_id, text=f"üéÅ **–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–¥–∞—Ä—É–Ω–æ–∫:** {emoji} **{category.capitalize()}** (*{rarity}*): {name}", parse_mode='Markdown')
    except Exception:
        pass

async def wow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("üö´ **–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤!**", parse_mode='Markdown')
        return

    if not context.args:
        await update.message.reply_text("‚ùå **–§–æ—Ä–º–∞—Ç:** `/wow <—Ç–µ–∫—Å—Ç>`", parse_mode='Markdown')
        return

    message = " ".join(context.args)
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("SELECT user_id FROM users")
        users = c.fetchall()

    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=f"üì¢ **–ì–ª–æ–±–∞–ª—å–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:**\n\n{message}", parse_mode='Markdown')
        except Exception:
            continue

    await update.message.reply_text(f"‚úÖ **–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:** *{message}*", parse_mode='Markdown')

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("üö´ **–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤!**", parse_mode='Markdown')
        return

    keyboard = [
        [InlineKeyboardButton("üéÅ –í–∏–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="admin_give_item")],
        [InlineKeyboardButton("üèÜ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏—Ç—É–ª", callback_data="admin_create_title")],
        [InlineKeyboardButton("üîß –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å", callback_data="admin_set_level")],
        [InlineKeyboardButton("üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="admin_wow")],
        [InlineKeyboardButton("üéâ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–≤–µ–Ω—Ç", callback_data="admin_start_event")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß **–ê–¥–º—ñ–Ω-–ü–∞–Ω–µ–ª—å:**\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    commands = {
        "attack_boss": attack,
        "collect": collect,
        "inventory": inventory,
        "profile": profile,
        "all_items": all_items,
        "leaderboard": leaderboard,
        "leaderboard_guild": leaderboard_guild
    }

    if query.data in commands:
        await commands[query.data](update, context)
    elif query.data.startswith("admin_"):
        command = query.data.split("_")[1]
        await query.message.reply_text(f"üîß **–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:** `/{command} <–ø–∞—Ä–∞–º–µ—Ç—Ä–∏>`", parse_mode='Markdown')

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    
    with sqlite3.connect("collection_bot.db") as conn:
        c = conn.cursor()
        c.execute("INSERT OR IGNORE INTO users (user_id, username, exp, bio) VALUES (?, ?, ?, ?)", (user_id, username, 0, "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"))
        c.execute("UPDATE users SET exp = exp + 1, username = ? WHERE user_id = ?", (username, user_id))
        conn.commit()

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error_message = "‚ö†Ô∏è **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞!** –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω–∞."
    if update:
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(error_message, parse_mode='Markdown')
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer(error_message, show_alert=True)

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("collect", collect))
    app.add_handler(CommandHandler("inventory", inventory))
    app.add_handler(CommandHandler("all_items", all_items))
    app.add_handler(CommandHandler("start_event", start_event))
    app.add_handler(CommandHandler("attack", attack))
    app.add_handler(CommandHandler("raid_attack", raid_attack))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("title_list", title_list))
    app.add_handler(CommandHandler("create_guild", create_guild))
    app.add_handler(CommandHandler("join_guild", join_guild))
    app.add_handler(CommandHandler("leave_guild", leave_guild))
    app.add_handler(CommandHandler("set_co_leader", set_co_leader))
    app.add_handler(CommandHandler("guild_list", guild_list))
    app.add_handler(CommandHandler("guild_members", guild_members))
    app.add_handler(CommandHandler("start_raid", start_raid))
    app.add_handler(CommandHandler("give_item", give_item))
    app.add_handler(CommandHandler("create_title", create_title))
    app.add_handler(CommandHandler("set_level", set_level))
    app.add_handler(CommandHandler("wow", wow))
    app.add_handler(CommandHandler("gift", gift))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("leaderboard_guild", leaderboard_guild))
    app.add_handler(CommandHandler("set_bio", set_bio))
    app.add_handler(CommandHandler("guild_war", guild_war))
    app.add_handler(CommandHandler("admin_panel", admin_panel))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_error_handler(error_handler)
    
    app.run_polling()

if __name__ == "__main__":

    main()








